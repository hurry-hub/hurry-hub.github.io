{"pages":[{},{},{}],"posts":[{"title":"modp的类DES算法实现","date":"2021-12-21T09:08:19.000Z","path":"2021/12/21/modpDES/","text":"此为博主在学习密码学课程时编写的作业，有关modp的类DES算法实现。 modpDES算法使用说明原理简述1 输入输出参数key: 64bit的密钥 message：64bit的需要加密的信息，即明文 cipher：64bit的已经被加密过的信息，即密文 2 流程2.1 轮密钥产生​ 此处为简单的实现该算法，并充分使用到密钥进行加密与解密过程中，采取 循环右移的方式生成轮密钥，其中每一步都进行 模p 的操作。 2.2 加密函数 f​ 该算法由于时间和要求的原因，从 DES 的基础上去掉了置换、S-盒替换以及逆置换的操作，仅保留了最其中的 f 函数。为充分进行加密，该算法将会进行16轮相同的加密操作，每轮迭代的过程可以表示如下：$$\\begin{cases}L_i = R_{i-1}\\R_i = (L_{i-1} + f(R_{i - 1}, K_i)) % P\\i = 1, 2, 3, …, 16\\end{cases}$$其中 f 函数的具体流程如下：$$\\begin {cases}R = Inv(R) % P \\R = (R * num + subkey) % P \\\\end{cases}$$即先对右部求逆，再乘上常数并加上轮密钥，其中每一步都进行了 模p 操作。 求逆部分使用了扩展欧几里得算法，加快了加密的速度。 流程图 具体实现此次算法实现较为简单，只编写了4个函数便完成了加密和解密操作： 1234ll Inv_R(ll num); // 求逆元void subkey(); // 轮密钥生成ll function(ll w_R, ll k); // function加密ll modpDES(ll message, ll flag); // modpDES主函数 并定义了一些全局变量方便运算： 1234const unsigned long P = 49451; // P取值const unsigned long p_2 = 2445401401; // P平方取值 unsigned long key = 0; // 密钥unsigned long sub_key[BIT] = &#123;0&#125;; // 轮密钥 宏定义以及变量类型定义如下： 123#define BIT 16 // 加密轮数#define CONST_NUM 7 // f函数的算子typedef unsigned long ll; 运行结果 此处预先生成了素数P = 49451，可以看到密文并未超过规定的0~P^2的范围，并且可以完整解密。 明文和密钥的大小限制是通过输入时进行控制的，处理中并未涉及。 ​ 对于明文空间在[0, 2445401401)的数据，进行一百万次加密的平均时间约为720ms, 解密一百万次的平均时间约为735ms。 ​ 对于密文空间是否均匀的问题，此处使用P = 257，明文空间为[0, 66049)作为实验样本，收集其中每一个明文对应的密文，绘制成下图： ​ 从图中可以发现，密文空间内是均匀分布的，证明该算法的混淆作用良好。 ​ 代码实现在博主的GitHub上：https://github.com/hurry-hub/cryptography_work/tree/main/modpDES","content":"<hr>\n<p>此为博主在学习密码学课程时编写的作业，有关modp的类DES算法实现。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"modpDES算法使用说明\"><a href=\"#modpDES算法使用说明\" class=\"headerlink\" title=\"modpDES算法使用说明\"></a>modpDES算法使用说明</h1><h2 id=\"原理简述\"><a href=\"#原理简述\" class=\"headerlink\" title=\"原理简述\"></a>原理简述</h2><h3 id=\"1-输入输出参数\"><a href=\"#1-输入输出参数\" class=\"headerlink\" title=\"1 输入输出参数\"></a>1 输入输出参数</h3><p><strong>key</strong>: 64bit的密钥</p>\n<p><strong>message</strong>：64bit的需要加密的信息，即明文</p>\n<p><strong>cipher</strong>：64bit的已经被加密过的信息，即密文</p>\n<h3 id=\"2-流程\"><a href=\"#2-流程\" class=\"headerlink\" title=\"2 流程\"></a>2 流程</h3><h4 id=\"2-1-轮密钥产生\"><a href=\"#2-1-轮密钥产生\" class=\"headerlink\" title=\"2.1 轮密钥产生\"></a>2.1 轮密钥产生</h4><p>​        此处为简单的实现该算法，并充分使用到密钥进行加密与解密过程中，采取</p>\n<p>循环右移的方式生成轮密钥，其中每一步都进行 <strong>模p</strong> 的操作。</p>\n<h4 id=\"2-2-加密函数-f\"><a href=\"#2-2-加密函数-f\" class=\"headerlink\" title=\"2.2 加密函数 f\"></a>2.2 加密函数 <strong>f</strong></h4><p>​        该算法由于时间和要求的原因，从 <strong>DES</strong> 的基础上去掉了置换、S-盒替换以及逆置换的操作，仅保留了最其中的 <strong>f</strong> 函数。为充分进行加密，该算法将会进行16轮相同的加密操作，每轮迭代的过程可以表示如下：<br>$$<br>\\begin{cases}<br>L_i = R_{i-1}\\<br>R_i = (L_{i-1} + f(R_{i - 1}, K_i)) % P\\<br>i = 1, 2, 3, …, 16<br>\\end{cases}<br>$$<br>其中 <strong>f</strong> 函数的具体流程如下：<br>$$<br>\\begin {cases}<br>R = Inv(R) % P \\<br>R = (R * num + subkey) % P \\<br>\\end{cases}<br>$$<br>即先对右部求逆，再乘上常数并加上轮密钥，其中每一步都进行了 <strong>模p</strong> 操作。</p>\n<p>求逆部分使用了扩展欧几里得算法，加快了加密的速度。</p>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><img src=\"https://s2.loli.net/2021/12/21/QYcqPvrfgi8Zneb.png\" style=\"zoom: 45%;\" />\n\n\n\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>此次算法实现较为简单，只编写了4个函数便完成了加密和解密操作：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Inv_R</span><span class=\"params\">(ll num)</span></span>;                                       <span class=\"comment\">// 求逆元</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">subkey</span><span class=\"params\">()</span></span>;                                          <span class=\"comment\">// 轮密钥生成</span></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">function</span><span class=\"params\">(ll w_R, ll k)</span></span>;                              <span class=\"comment\">// function加密</span></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">modpDES</span><span class=\"params\">(ll message, ll flag)</span></span>;                        <span class=\"comment\">// modpDES主函数</span></span><br></pre></td></tr></table></figure>\n\n<p>并定义了一些全局变量方便运算：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> P = <span class=\"number\">49451</span>;                          <span class=\"comment\">// P取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> p_2 = <span class=\"number\">2445401401</span>;                   <span class=\"comment\">// P平方取值 </span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> key = <span class=\"number\">0</span>;                                  <span class=\"comment\">// 密钥</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sub_key[BIT] = &#123;<span class=\"number\">0</span>&#125;;                       <span class=\"comment\">// 轮密钥</span></span><br></pre></td></tr></table></figure>\n\n<p>宏定义以及变量类型定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BIT 16                                          <span class=\"comment\">// 加密轮数</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CONST_NUM 7                                     <span class=\"comment\">// f函数的算子</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> ll;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p><img data-fancybox=\"gallery\" data-sizes=\"auto\" data-src=\"https://s2.loli.net/2021/12/21/7HeKIrF9amoEftX.png\" alt=\"res1\" class=\"lazyload\"></p>\n<p>此处预先生成了素数<strong>P = 49451</strong>，可以看到密文并未超过规定的0~P^2的范围，并且可以完整解密。</p>\n<p><img data-fancybox=\"gallery\" data-sizes=\"auto\" data-src=\"https://s2.loli.net/2021/12/21/gE3kUfcxXC9pZe6.png\" alt=\"res2\" class=\"lazyload\"></p>\n<p>明文和密钥的大小限制是通过输入时进行控制的，处理中并未涉及。</p>\n<p><img data-fancybox=\"gallery\" data-sizes=\"auto\" data-src=\"https://s2.loli.net/2021/12/21/fi9gJsWzQAV1FSO.png\" alt=\"res3\" class=\"lazyload\"></p>\n<p>​        对于明文空间在[0, 2445401401)的数据，进行一百万次加密的平均时间约为<strong>720ms</strong>, 解密一百万次的平均时间约为<strong>735ms</strong>。</p>\n<p>​        对于密文空间是否均匀的问题，此处使用P = 257，明文空间为[0, 66049)作为实验样本，收集其中每一个明文对应的密文，绘制成下图：</p>\n<p><img data-fancybox=\"gallery\" data-sizes=\"auto\" data-src=\"https://s2.loli.net/2021/12/21/Hh6Qw1kDbdCrYXv.png\" alt=\"res4\" class=\"lazyload\"></p>\n<p>​        从图中可以发现，密文空间内是均匀分布的，证明该算法的混淆作用良好。</p>\n<p>​        代码实现在博主的GitHub上：<a href=\"https://github.com/hurry-hub/cryptography_work/tree/main/modpDES\">https://github.com/hurry-hub/cryptography_work/tree/main/modpDES</a></p>\n","comments":true,"link":"","categories":[{"name":"cryptography","slug":"cryptography","permalink":"https://hurry-hub.github.io/categories/cryptography/"}],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://hurry-hub.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"}]},{"title":"64位DES算法及其测速与原理验证","date":"2021-12-12T09:38:34.000Z","path":"2021/12/12/DES/","text":"此为博主在学习密码学课程时编写的作业，有关DES算法及其效果验证。 64位DES算法基本原理1 输入输出参数key: 64bit的密钥 message：64bit的需要加密的信息，即明文 cipher：64bit的已经被加密过的信息，即密文 2 流程2.1 子密钥产生​ DES算法由64位密钥产生16轮的48位子密钥。在每一轮的迭代过程中，使用不同的子密钥。 a、把密钥的奇偶校验位忽略不参与计算，即每个字节的第8位，将64位密钥降至56位，然后根据选择置换 PC-1 将这56位分成两块 C0 (28位)和 D0 (28位)； 123456char PC1_Table[56] = &#123; 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4&#125;; b、将 C0 和 D0 进行循环左移变化(注：每轮循环左移的位数由轮数决定)，变换后生成 C1 和 D1 ，然后 C1 和 D1 合并，并通过选择置换 PC-2 生成子密钥 K1 (48位)； 123char Move_Table[16] = &#123; 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1&#125;; c、 C1 和 D1 在次经过循环左移变换，生成 C2 和 D2 ，然后 C2 和 D2 合并，通过选择置换 PC-2 生成密钥 K2 (48位)； 123456char PC2_Table[48] = &#123; 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 &#125;; d、以此类推，得到 K16 (48位)。但是最后一轮的左右两部分不交换，而是直接合并在一起 R16L16 ，作为逆置换的输入块。其中循环左移的位数一共是循环左移16次，其中第一次、第二次、第九次、第十六次是循环左移一位，其他都是左移两位。 2.2 初始置换 IP​ 初始置换 IP 是 DES 的第一步密码变换，作用是将64位明文打乱重排并分成左右两半，左边32位作为 L0 ，右边32位作为 R0 ，供之后的加密迭代使用。 123456const char IP_Table[64] = &#123; 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7 &#125;; 2.3 加密函数​ 经过初始置换后，进行16轮完全相同的运算，在运算过程中数据与秘钥结合。函数 f 的输出经过一个异或运算，和左半部分结合形成新的右半部分，原来的右半部分成为新的左半部分。每轮迭代的过程可以表示如下：$$\\begin{cases}L_i = R_{i-1}\\R_i = L_{i-1}\\oplus f(R_{i - 1}, K_i)\\i = 1, 2, 3, …, 16\\end{cases}$$​ 其中 f 包括三部分 扩展置换E、 S-盒替换 、P-盒置换 。 2.3.1 扩展置换E​ 通过扩展置换E，数据的右半部分 Rn 从32位扩展到48位。扩展置换改变了位的次序，重复了某些位。 ​ 扩展置换的目的：a、产生与秘钥相同长度的数据以进行异或运算， R0 是32位，子秘钥是48位，所以 R0 要先进行扩展置换之后与子秘钥进行异或运算；b、提供更长的结果，使得在替换运算时能够进行压缩。 ​ 扩展置换E规则如下： 123456char E_Table[48] = &#123; 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1&#125;; 2.3.2 S-盒替换​ Rn 扩展置换之后与子秘钥Kn异或以后的结果作为输入块进行S盒替换运算功能是把48位数据变为32位数据。 ​ 替换运算由8个不同的替换盒(S盒)完成。每个 S-盒 有6位输入，4位输出。所以48位的输入块被分成8个6位的分组，每一个分组对应一个S-盒替换操作。经过S-盒替换，形成8个4位分组结果。 ​ 值得注意的是，每一个 S-盒 的输入数据是6位，输出数据是4位，但是每个 S-盒 自身是64位！！每个 S-盒 是4行16列的格式，因为二进制4位是0~15。8个 S-盒 的值如下： 123456789101112131415161718192021222324252627282930313233343536373839404142char S_Box[8][4][16] = &#123; //S1 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7, 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8, 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0, 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13, //S2 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10, 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5, 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15, 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9, //S3 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8, 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1, 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7, 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12, //S4 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15, 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9, 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4, 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14, //S5 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9, 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6, 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14, 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3, //S6 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11, 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8, 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6, 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13, //S7 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1, 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6, 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2, 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12, //S8 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7, 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2, 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8, 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11&#125;; 2.3.3 P-盒替换​ S-盒替换运算，每一盒得到4位，8盒共得到32位输出。这32位输出作为P盒置换的输入块。P盒置换将每一位输入位映射到输出位。任何一位都不能被映射两次，也不能被略去。 ​ 经过P-盒置换的结果与最初64位分组的左半部分异或，然后左右两部分交换，开始下一轮迭代。P-盒置换表(表示数据的位置)共32位。 1234char P_Table[32] = &#123; 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25&#125;; 2.4 逆置换​ 将初始置换进行16次的迭代，即进行16层的加密变换，这个运算过程我们暂时称为函数f。得到 L16 和 R16 ，将此作为输入块，进行逆置换得到最终的密文输出块。逆置换是初始置换的逆运算，逆置换规则如下: 123456const char IPR_Table[64] = &#123; 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25 &#125;; 3 流程图 具体实现自实现 DES 包括三个文件：function.h、function.c 以及 main.c. function.h: 存放全局变量定义以及各实现函数声明。 123456789101112131415/************************************** 全局变量 **************************************************/extern int list;/************************************** 自定义函数 ************************************************/void SetKey(char Enc_Key[8]); // 生成16轮的子密钥；void Swap(bool * Data_out, char * Data_in, int number); // 字节转换成位；void TableReplace(bool *Data_out, bool *Data_in, const char *Table, int number); // 各种表的置换算法；void Bitcopy(bool * Data_out, bool * Data_in, int number); // 二进制数组的拷贝void Loop_bit(bool * Data_out, int movstep, int len); // 左移位；void Run_DES(char message[8], char HexMssage[16], int flag); // DES的轮加密算法void Xor(bool * Message_out, bool * Message_in, int number); // 执行异或void S_change(bool * Data_out, bool * Data_in); // S盒变换；void HexToBit(bool * Data_out, char * Data_in, int number); // 十六进制转二进制void BitToHex(char * Data_out, bool * Data_in, int number); // 二进制转换成十六进制； function.c: 存放各函数的具体实现内容。 main.c: 主函数运行程序并测速，将1000000次的密文变化数写入result.txt中。 运行结果​ 以下为一次运行时的截图，经统计DES加密1000000次的时间约11400ms，解密时间类似。 ​ 同时，明文每变化1bit，密文的变化情况如图所示(基本符合32的正态分布)： ​ 0bit的出现的可能原因在于，当变化的1bit位和前一个变化的bit相同时(采用和前一次密文的结果比较的方式查看密文变化的位数)，二者的变化比特数可能相同，故会出现0的情况，属于本实验方法的原因，DES的原理还是符合0-64的正态分布的。 代码实现在博主的个人GitHub上：https://github.com/hurry-hub/cryptography_work/tree/main/DES","content":"<hr>\n<p>此为博主在学习密码学课程时编写的作业，有关DES算法及其效果验证。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"64位DES算法\"><a href=\"#64位DES算法\" class=\"headerlink\" title=\"64位DES算法\"></a>64位DES算法</h1><h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><h3 id=\"1-输入输出参数\"><a href=\"#1-输入输出参数\" class=\"headerlink\" title=\"1 输入输出参数\"></a>1 输入输出参数</h3><p><strong>key</strong>: 64bit的密钥</p>\n<p><strong>message</strong>：64bit的需要加密的信息，即明文</p>\n<p><strong>cipher</strong>：64bit的已经被加密过的信息，即密文</p>\n<h3 id=\"2-流程\"><a href=\"#2-流程\" class=\"headerlink\" title=\"2 流程\"></a>2 流程</h3><h4 id=\"2-1-子密钥产生\"><a href=\"#2-1-子密钥产生\" class=\"headerlink\" title=\"2.1 子密钥产生\"></a>2.1 子密钥产生</h4><p>​        <strong>DES</strong>算法由64位密钥产生16轮的48位子密钥。在每一轮的迭代过程中，使用不同的子密钥。</p>\n<p>a、把密钥的奇偶校验位忽略不参与计算，即每个字节的第8位，将64位密钥降至56位，然后根据选择置换 <strong>PC-1</strong> 将这56位分成两块 <strong>C0</strong> (28位)和 <strong>D0</strong> (28位)；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> PC1_Table[<span class=\"number\">56</span>] = &#123;</span><br><span class=\"line\">\t<span class=\"number\">57</span>, <span class=\"number\">49</span>, <span class=\"number\">41</span>, <span class=\"number\">33</span>, <span class=\"number\">25</span>, <span class=\"number\">17</span>,  <span class=\"number\">9</span>,  <span class=\"number\">1</span>, <span class=\"number\">58</span>, <span class=\"number\">50</span>, <span class=\"number\">42</span>, <span class=\"number\">34</span>, <span class=\"number\">26</span>, <span class=\"number\">18</span>, </span><br><span class=\"line\">\t<span class=\"number\">10</span>,  <span class=\"number\">2</span>, <span class=\"number\">59</span>, <span class=\"number\">51</span>, <span class=\"number\">43</span>, <span class=\"number\">35</span>, <span class=\"number\">27</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>,  <span class=\"number\">3</span>, <span class=\"number\">60</span>, <span class=\"number\">52</span>, <span class=\"number\">44</span>, <span class=\"number\">36</span>, </span><br><span class=\"line\">\t<span class=\"number\">63</span>, <span class=\"number\">55</span>, <span class=\"number\">47</span>, <span class=\"number\">39</span>, <span class=\"number\">31</span>, <span class=\"number\">23</span>, <span class=\"number\">15</span>,  <span class=\"number\">7</span>, <span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">46</span>, <span class=\"number\">38</span>, <span class=\"number\">30</span>, <span class=\"number\">22</span>, </span><br><span class=\"line\">\t<span class=\"number\">14</span>,  <span class=\"number\">6</span>, <span class=\"number\">61</span>, <span class=\"number\">53</span>, <span class=\"number\">45</span>, <span class=\"number\">37</span>, <span class=\"number\">29</span>, <span class=\"number\">21</span>, <span class=\"number\">13</span>,  <span class=\"number\">5</span>, <span class=\"number\">28</span>, <span class=\"number\">20</span>, <span class=\"number\">12</span>,  <span class=\"number\">4</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>b、将 <strong>C0</strong> 和 <strong>D0</strong> 进行循环左移变化(注：每轮循环左移的位数由轮数决定)，变换后生成 <strong>C1</strong> 和 <strong>D1</strong> ，然后 <strong>C1</strong> 和 <strong>D1</strong> 合并，并通过选择置换 <strong>PC-2</strong> 生成子密钥 <strong>K1</strong> (48位)；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> Move_Table[<span class=\"number\">16</span>] = &#123;</span><br><span class=\"line\">\t<span class=\"number\">1</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">2</span>,  <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>c、 <strong>C1</strong> 和 <strong>D1</strong> 在次经过循环左移变换，生成 <strong>C2</strong> 和 <strong>D2</strong> ，然后 <strong>C2</strong> 和 <strong>D2</strong> 合并，通过选择置换 <strong>PC-2</strong> 生成密钥 <strong>K2</strong> (48位)；</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> PC2_Table[<span class=\"number\">48</span>] = &#123;</span><br><span class=\"line\">\t<span class=\"number\">14</span>, <span class=\"number\">17</span>, <span class=\"number\">11</span>, <span class=\"number\">24</span>,  <span class=\"number\">1</span>,  <span class=\"number\">5</span>,  <span class=\"number\">3</span>, <span class=\"number\">28</span>, <span class=\"number\">15</span>,  <span class=\"number\">6</span>, <span class=\"number\">21</span>, <span class=\"number\">10</span>, </span><br><span class=\"line\">\t<span class=\"number\">23</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>,  <span class=\"number\">4</span>, <span class=\"number\">26</span>,  <span class=\"number\">8</span>, <span class=\"number\">16</span>,  <span class=\"number\">7</span>, <span class=\"number\">27</span>, <span class=\"number\">20</span>, <span class=\"number\">13</span>,  <span class=\"number\">2</span>, </span><br><span class=\"line\">\t<span class=\"number\">41</span>, <span class=\"number\">52</span>, <span class=\"number\">31</span>, <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">55</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">51</span>, <span class=\"number\">45</span>, <span class=\"number\">33</span>, <span class=\"number\">48</span>, </span><br><span class=\"line\">\t<span class=\"number\">44</span>, <span class=\"number\">49</span>, <span class=\"number\">39</span>, <span class=\"number\">56</span>, <span class=\"number\">34</span>, <span class=\"number\">53</span>, <span class=\"number\">46</span>, <span class=\"number\">42</span>, <span class=\"number\">50</span>, <span class=\"number\">36</span>, <span class=\"number\">29</span>, <span class=\"number\">32</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>d、以此类推，得到 <strong>K16</strong> (48位)。但是最后一轮的左右两部分不交换，而是直接合并在一起 <strong>R16L16</strong> ，作为逆置换的输入块。其中循环左移的位数一共是循环左移16次，其中第一次、第二次、第九次、第十六次是循环左移一位，其他都是左移两位。</p>\n<h4 id=\"2-2-初始置换-IP\"><a href=\"#2-2-初始置换-IP\" class=\"headerlink\" title=\"2.2 初始置换 IP\"></a>2.2 初始置换 IP</h4><p>​        初始置换 <strong>IP</strong> 是 <strong>DES</strong> 的第一步密码变换，作用是将64位明文打乱重排并分成左右两半，左边32位作为 <strong>L0</strong> ，右边32位作为 <strong>R0</strong> ，供之后的加密迭代使用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> IP_Table[<span class=\"number\">64</span>] = &#123;             </span><br><span class=\"line\">\t<span class=\"number\">58</span>, <span class=\"number\">50</span>, <span class=\"number\">42</span>, <span class=\"number\">34</span>, <span class=\"number\">26</span>, <span class=\"number\">18</span>, <span class=\"number\">10</span>,  <span class=\"number\">2</span>, <span class=\"number\">60</span>, <span class=\"number\">52</span>, <span class=\"number\">44</span>, <span class=\"number\">36</span>, <span class=\"number\">28</span>, <span class=\"number\">20</span>, <span class=\"number\">12</span>,  <span class=\"number\">4</span>, </span><br><span class=\"line\">\t<span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">46</span>, <span class=\"number\">38</span>, <span class=\"number\">30</span>, <span class=\"number\">22</span>, <span class=\"number\">14</span>,  <span class=\"number\">6</span>, <span class=\"number\">64</span>, <span class=\"number\">56</span>, <span class=\"number\">48</span>, <span class=\"number\">40</span>, <span class=\"number\">32</span>, <span class=\"number\">24</span>, <span class=\"number\">16</span>,  <span class=\"number\">8</span>, </span><br><span class=\"line\">\t<span class=\"number\">57</span>, <span class=\"number\">49</span>, <span class=\"number\">41</span>, <span class=\"number\">33</span>, <span class=\"number\">25</span>, <span class=\"number\">17</span>,  <span class=\"number\">9</span>,  <span class=\"number\">1</span>, <span class=\"number\">59</span>, <span class=\"number\">51</span>, <span class=\"number\">43</span>, <span class=\"number\">35</span>, <span class=\"number\">27</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>,  <span class=\"number\">3</span>, </span><br><span class=\"line\">\t<span class=\"number\">61</span>, <span class=\"number\">53</span>, <span class=\"number\">45</span>, <span class=\"number\">37</span>, <span class=\"number\">29</span>, <span class=\"number\">21</span>, <span class=\"number\">13</span>,  <span class=\"number\">5</span>, <span class=\"number\">63</span>, <span class=\"number\">55</span>, <span class=\"number\">47</span>, <span class=\"number\">39</span>, <span class=\"number\">31</span>, <span class=\"number\">23</span>, <span class=\"number\">15</span>,  <span class=\"number\">7</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-3-加密函数\"><a href=\"#2-3-加密函数\" class=\"headerlink\" title=\"2.3  加密函数\"></a>2.3  加密函数</h4><p>​        经过初始置换后，进行16轮完全相同的运算，在运算过程中数据与秘钥结合。函数 <strong>f</strong> 的输出经过一个异或运算，和左半部分结合形成新的右半部分，原来的右半部分成为新的左半部分。每轮迭代的过程可以表示如下：<br>$$<br>\\begin{cases}<br>L_i = R_{i-1}\\<br>R_i = L_{i-1}\\oplus f(R_{i - 1}, K_i)\\<br>i = 1, 2, 3, …, 16<br>\\end{cases}<br>$$<br>​        其中 <strong>f</strong> 包括三部分 <strong>扩展置换E</strong>、 <strong>S-盒替换</strong> 、<strong>P-盒置换</strong> 。</p>\n<h5 id=\"2-3-1-扩展置换E\"><a href=\"#2-3-1-扩展置换E\" class=\"headerlink\" title=\"2.3.1 扩展置换E\"></a>2.3.1 扩展置换E</h5><p>​        通过扩展置换E，数据的右半部分 <strong>Rn</strong> 从32位扩展到48位。扩展置换改变了位的次序，重复了某些位。</p>\n<p>​        扩展置换的目的：a、产生与秘钥相同长度的数据以进行异或运算， <strong>R0</strong> 是32位，子秘钥是48位，所以 <strong>R0</strong> 要先进行扩展置换之后与子秘钥进行异或运算；b、提供更长的结果，使得在替换运算时能够进行压缩。</p>\n<p>​        扩展置换E规则如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> E_Table[<span class=\"number\">48</span>] = &#123;</span><br><span class=\"line\">\t<span class=\"number\">32</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>, </span><br><span class=\"line\">\t<span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, </span><br><span class=\"line\">\t<span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, </span><br><span class=\"line\">\t<span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>,  <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-2-S-盒替换\"><a href=\"#2-3-2-S-盒替换\" class=\"headerlink\" title=\"2.3.2 S-盒替换\"></a>2.3.2 S-盒替换</h5><p>​        <strong>Rn</strong> 扩展置换之后与子秘钥<strong>Kn</strong>异或以后的结果作为输入块进行S盒替换运算功能是把48位数据变为32位数据。</p>\n<p>​        替换运算由8个不同的替换盒(<strong>S盒</strong>)完成。每个 <strong>S-盒</strong> 有6位输入，4位输出。所以48位的输入块被分成8个6位的分组，每一个分组对应一个S-盒替换操作。经过S-盒替换，形成8个4位分组结果。</p>\n<p>​        值得注意的是，每一个 <strong>S-盒</strong> 的输入数据是6位，输出数据是4位，但是每个 <strong>S-盒</strong> 自身是64位！！每个 <strong>S-盒</strong> 是4行16列的格式，因为二进制4位是0~15。8个 <strong>S-盒</strong> 的值如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> S_Box[<span class=\"number\">8</span>][<span class=\"number\">4</span>][<span class=\"number\">16</span>] = &#123;</span><br><span class=\"line\"> <span class=\"comment\">//S1</span></span><br><span class=\"line\">\t<span class=\"number\">14</span>,  <span class=\"number\">4</span>, <span class=\"number\">13</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>, <span class=\"number\">15</span>, <span class=\"number\">11</span>,  <span class=\"number\">8</span>,  <span class=\"number\">3</span>, <span class=\"number\">10</span>,  <span class=\"number\">6</span>, <span class=\"number\">12</span>,  <span class=\"number\">5</span>,  <span class=\"number\">9</span>,  <span class=\"number\">0</span>,  <span class=\"number\">7</span>, </span><br><span class=\"line\">\t<span class=\"number\">0</span>, <span class=\"number\">15</span>,  <span class=\"number\">7</span>,  <span class=\"number\">4</span>, <span class=\"number\">14</span>,  <span class=\"number\">2</span>, <span class=\"number\">13</span>,  <span class=\"number\">1</span>, <span class=\"number\">10</span>,  <span class=\"number\">6</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>,  <span class=\"number\">9</span>,  <span class=\"number\">5</span>,  <span class=\"number\">3</span>,  <span class=\"number\">8</span>, </span><br><span class=\"line\">\t<span class=\"number\">4</span>,  <span class=\"number\">1</span>, <span class=\"number\">14</span>,  <span class=\"number\">8</span>, <span class=\"number\">13</span>,  <span class=\"number\">6</span>,  <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">12</span>,  <span class=\"number\">9</span>,  <span class=\"number\">7</span>,  <span class=\"number\">3</span>, <span class=\"number\">10</span>,  <span class=\"number\">5</span>,  <span class=\"number\">0</span>, </span><br><span class=\"line\">\t<span class=\"number\">15</span>, <span class=\"number\">12</span>,  <span class=\"number\">8</span>,  <span class=\"number\">2</span>,  <span class=\"number\">4</span>,  <span class=\"number\">9</span>,  <span class=\"number\">1</span>,  <span class=\"number\">7</span>,  <span class=\"number\">5</span>, <span class=\"number\">11</span>,  <span class=\"number\">3</span>, <span class=\"number\">14</span>, <span class=\"number\">10</span>,  <span class=\"number\">0</span>,  <span class=\"number\">6</span>, <span class=\"number\">13</span>, </span><br><span class=\"line\"> <span class=\"comment\">//S2</span></span><br><span class=\"line\">\t<span class=\"number\">15</span>,  <span class=\"number\">1</span>,  <span class=\"number\">8</span>, <span class=\"number\">14</span>,  <span class=\"number\">6</span>, <span class=\"number\">11</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">9</span>,  <span class=\"number\">7</span>,  <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>,  <span class=\"number\">0</span>,  <span class=\"number\">5</span>, <span class=\"number\">10</span>, </span><br><span class=\"line\">\t<span class=\"number\">3</span>, <span class=\"number\">13</span>,  <span class=\"number\">4</span>,  <span class=\"number\">7</span>, <span class=\"number\">15</span>,  <span class=\"number\">2</span>,  <span class=\"number\">8</span>, <span class=\"number\">14</span>, <span class=\"number\">12</span>,  <span class=\"number\">0</span>,  <span class=\"number\">1</span>, <span class=\"number\">10</span>,  <span class=\"number\">6</span>,  <span class=\"number\">9</span>, <span class=\"number\">11</span>,  <span class=\"number\">5</span>, </span><br><span class=\"line\">\t<span class=\"number\">0</span>, <span class=\"number\">14</span>,  <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>,  <span class=\"number\">4</span>, <span class=\"number\">13</span>,  <span class=\"number\">1</span>,  <span class=\"number\">5</span>,  <span class=\"number\">8</span>, <span class=\"number\">12</span>,  <span class=\"number\">6</span>,  <span class=\"number\">9</span>,  <span class=\"number\">3</span>,  <span class=\"number\">2</span>, <span class=\"number\">15</span>, </span><br><span class=\"line\">\t<span class=\"number\">13</span>,  <span class=\"number\">8</span>, <span class=\"number\">10</span>,  <span class=\"number\">1</span>,  <span class=\"number\">3</span>, <span class=\"number\">15</span>,  <span class=\"number\">4</span>,  <span class=\"number\">2</span>, <span class=\"number\">11</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>, <span class=\"number\">12</span>,  <span class=\"number\">0</span>,  <span class=\"number\">5</span>, <span class=\"number\">14</span>,  <span class=\"number\">9</span>, </span><br><span class=\"line\"> <span class=\"comment\">//S3</span></span><br><span class=\"line\">\t<span class=\"number\">10</span>,  <span class=\"number\">0</span>,  <span class=\"number\">9</span>, <span class=\"number\">14</span>,  <span class=\"number\">6</span>,  <span class=\"number\">3</span>, <span class=\"number\">15</span>,  <span class=\"number\">5</span>,  <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>,  <span class=\"number\">7</span>, <span class=\"number\">11</span>,  <span class=\"number\">4</span>,  <span class=\"number\">2</span>,  <span class=\"number\">8</span>, </span><br><span class=\"line\">\t<span class=\"number\">13</span>,  <span class=\"number\">7</span>,  <span class=\"number\">0</span>,  <span class=\"number\">9</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">6</span>, <span class=\"number\">10</span>,  <span class=\"number\">2</span>,  <span class=\"number\">8</span>,  <span class=\"number\">5</span>, <span class=\"number\">14</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>,  <span class=\"number\">1</span>, </span><br><span class=\"line\">\t<span class=\"number\">13</span>,  <span class=\"number\">6</span>,  <span class=\"number\">4</span>,  <span class=\"number\">9</span>,  <span class=\"number\">8</span>, <span class=\"number\">15</span>,  <span class=\"number\">3</span>,  <span class=\"number\">0</span>, <span class=\"number\">11</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>, <span class=\"number\">12</span>,  <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>,  <span class=\"number\">7</span>, </span><br><span class=\"line\">\t<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>,  <span class=\"number\">0</span>,  <span class=\"number\">6</span>,  <span class=\"number\">9</span>,  <span class=\"number\">8</span>,  <span class=\"number\">7</span>,  <span class=\"number\">4</span>, <span class=\"number\">15</span>, <span class=\"number\">14</span>,  <span class=\"number\">3</span>, <span class=\"number\">11</span>,  <span class=\"number\">5</span>,  <span class=\"number\">2</span>, <span class=\"number\">12</span>, </span><br><span class=\"line\"> <span class=\"comment\">//S4</span></span><br><span class=\"line\">\t<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>,  <span class=\"number\">3</span>,  <span class=\"number\">0</span>,  <span class=\"number\">6</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">8</span>,  <span class=\"number\">5</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>,  <span class=\"number\">4</span>, <span class=\"number\">15</span>, </span><br><span class=\"line\">\t<span class=\"number\">13</span>,  <span class=\"number\">8</span>, <span class=\"number\">11</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>, <span class=\"number\">15</span>,  <span class=\"number\">0</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">7</span>,  <span class=\"number\">2</span>, <span class=\"number\">12</span>,  <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>,  <span class=\"number\">9</span>, </span><br><span class=\"line\">\t<span class=\"number\">10</span>,  <span class=\"number\">6</span>,  <span class=\"number\">9</span>,  <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>,  <span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>,  <span class=\"number\">1</span>,  <span class=\"number\">3</span>, <span class=\"number\">14</span>,  <span class=\"number\">5</span>,  <span class=\"number\">2</span>,  <span class=\"number\">8</span>,  <span class=\"number\">4</span>, </span><br><span class=\"line\">\t<span class=\"number\">3</span>, <span class=\"number\">15</span>,  <span class=\"number\">0</span>,  <span class=\"number\">6</span>, <span class=\"number\">10</span>,  <span class=\"number\">1</span>, <span class=\"number\">13</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>,  <span class=\"number\">7</span>,  <span class=\"number\">2</span>, <span class=\"number\">14</span>, </span><br><span class=\"line\"> <span class=\"comment\">//S5</span></span><br><span class=\"line\">\t<span class=\"number\">2</span>, <span class=\"number\">12</span>,  <span class=\"number\">4</span>,  <span class=\"number\">1</span>,  <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>,  <span class=\"number\">6</span>,  <span class=\"number\">8</span>,  <span class=\"number\">5</span>,  <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">13</span>,  <span class=\"number\">0</span>, <span class=\"number\">14</span>,  <span class=\"number\">9</span>, </span><br><span class=\"line\">\t<span class=\"number\">14</span>, <span class=\"number\">11</span>,  <span class=\"number\">2</span>, <span class=\"number\">12</span>,  <span class=\"number\">4</span>,  <span class=\"number\">7</span>, <span class=\"number\">13</span>,  <span class=\"number\">1</span>,  <span class=\"number\">5</span>,  <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">10</span>,  <span class=\"number\">3</span>,  <span class=\"number\">9</span>,  <span class=\"number\">8</span>,  <span class=\"number\">6</span>, </span><br><span class=\"line\">\t<span class=\"number\">4</span>,  <span class=\"number\">2</span>,  <span class=\"number\">1</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>, <span class=\"number\">15</span>,  <span class=\"number\">9</span>, <span class=\"number\">12</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">3</span>,  <span class=\"number\">0</span>, <span class=\"number\">14</span>, </span><br><span class=\"line\">\t<span class=\"number\">11</span>,  <span class=\"number\">8</span>, <span class=\"number\">12</span>,  <span class=\"number\">7</span>,  <span class=\"number\">1</span>, <span class=\"number\">14</span>,  <span class=\"number\">2</span>, <span class=\"number\">13</span>,  <span class=\"number\">6</span>, <span class=\"number\">15</span>,  <span class=\"number\">0</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">3</span>, </span><br><span class=\"line\"> <span class=\"comment\">//S6</span></span><br><span class=\"line\">\t<span class=\"number\">12</span>,  <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>,  <span class=\"number\">9</span>,  <span class=\"number\">2</span>,  <span class=\"number\">6</span>,  <span class=\"number\">8</span>,  <span class=\"number\">0</span>, <span class=\"number\">13</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>, <span class=\"number\">14</span>,  <span class=\"number\">7</span>,  <span class=\"number\">5</span>, <span class=\"number\">11</span>, </span><br><span class=\"line\">\t<span class=\"number\">10</span>, <span class=\"number\">15</span>,  <span class=\"number\">4</span>,  <span class=\"number\">2</span>,  <span class=\"number\">7</span>, <span class=\"number\">12</span>,  <span class=\"number\">9</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>,  <span class=\"number\">0</span>, <span class=\"number\">11</span>,  <span class=\"number\">3</span>,  <span class=\"number\">8</span>, </span><br><span class=\"line\">\t<span class=\"number\">9</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>,  <span class=\"number\">5</span>,  <span class=\"number\">2</span>,  <span class=\"number\">8</span>, <span class=\"number\">12</span>,  <span class=\"number\">3</span>,  <span class=\"number\">7</span>,  <span class=\"number\">0</span>,  <span class=\"number\">4</span>, <span class=\"number\">10</span>,  <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>,  <span class=\"number\">6</span>, </span><br><span class=\"line\">\t<span class=\"number\">4</span>,  <span class=\"number\">3</span>,  <span class=\"number\">2</span>, <span class=\"number\">12</span>,  <span class=\"number\">9</span>,  <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">14</span>,  <span class=\"number\">1</span>,  <span class=\"number\">7</span>,  <span class=\"number\">6</span>,  <span class=\"number\">0</span>,  <span class=\"number\">8</span>, <span class=\"number\">13</span>, </span><br><span class=\"line\"> <span class=\"comment\">//S7</span></span><br><span class=\"line\">\t<span class=\"number\">4</span>, <span class=\"number\">11</span>,  <span class=\"number\">2</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>,  <span class=\"number\">0</span>,  <span class=\"number\">8</span>, <span class=\"number\">13</span>,  <span class=\"number\">3</span>, <span class=\"number\">12</span>,  <span class=\"number\">9</span>,  <span class=\"number\">7</span>,  <span class=\"number\">5</span>, <span class=\"number\">10</span>,  <span class=\"number\">6</span>,  <span class=\"number\">1</span>, </span><br><span class=\"line\">\t<span class=\"number\">13</span>,  <span class=\"number\">0</span>, <span class=\"number\">11</span>,  <span class=\"number\">7</span>,  <span class=\"number\">4</span>,  <span class=\"number\">9</span>,  <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">14</span>,  <span class=\"number\">3</span>,  <span class=\"number\">5</span>, <span class=\"number\">12</span>,  <span class=\"number\">2</span>, <span class=\"number\">15</span>,  <span class=\"number\">8</span>,  <span class=\"number\">6</span>, </span><br><span class=\"line\">\t<span class=\"number\">1</span>,  <span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>,  <span class=\"number\">3</span>,  <span class=\"number\">7</span>, <span class=\"number\">14</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>,  <span class=\"number\">6</span>,  <span class=\"number\">8</span>,  <span class=\"number\">0</span>,  <span class=\"number\">5</span>,  <span class=\"number\">9</span>,  <span class=\"number\">2</span>, </span><br><span class=\"line\">\t<span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>,  <span class=\"number\">8</span>,  <span class=\"number\">1</span>,  <span class=\"number\">4</span>, <span class=\"number\">10</span>,  <span class=\"number\">7</span>,  <span class=\"number\">9</span>,  <span class=\"number\">5</span>,  <span class=\"number\">0</span>, <span class=\"number\">15</span>, <span class=\"number\">14</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>, <span class=\"number\">12</span>, </span><br><span class=\"line\"> <span class=\"comment\">//S8</span></span><br><span class=\"line\">\t<span class=\"number\">13</span>,  <span class=\"number\">2</span>,  <span class=\"number\">8</span>,  <span class=\"number\">4</span>,  <span class=\"number\">6</span>, <span class=\"number\">15</span>, <span class=\"number\">11</span>,  <span class=\"number\">1</span>, <span class=\"number\">10</span>,  <span class=\"number\">9</span>,  <span class=\"number\">3</span>, <span class=\"number\">14</span>,  <span class=\"number\">5</span>,  <span class=\"number\">0</span>, <span class=\"number\">12</span>,  <span class=\"number\">7</span>, </span><br><span class=\"line\">\t<span class=\"number\">1</span>, <span class=\"number\">15</span>, <span class=\"number\">13</span>,  <span class=\"number\">8</span>, <span class=\"number\">10</span>,  <span class=\"number\">3</span>,  <span class=\"number\">7</span>,  <span class=\"number\">4</span>, <span class=\"number\">12</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>, <span class=\"number\">11</span>,  <span class=\"number\">0</span>, <span class=\"number\">14</span>,  <span class=\"number\">9</span>,  <span class=\"number\">2</span>, </span><br><span class=\"line\">\t<span class=\"number\">7</span>, <span class=\"number\">11</span>,  <span class=\"number\">4</span>,  <span class=\"number\">1</span>,  <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>,  <span class=\"number\">2</span>,  <span class=\"number\">0</span>,  <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>,  <span class=\"number\">3</span>,  <span class=\"number\">5</span>,  <span class=\"number\">8</span>, </span><br><span class=\"line\">\t<span class=\"number\">2</span>,  <span class=\"number\">1</span>, <span class=\"number\">14</span>,  <span class=\"number\">7</span>,  <span class=\"number\">4</span>, <span class=\"number\">10</span>,  <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">12</span>,  <span class=\"number\">9</span>,  <span class=\"number\">0</span>,  <span class=\"number\">3</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>, <span class=\"number\">11</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-3-P-盒替换\"><a href=\"#2-3-3-P-盒替换\" class=\"headerlink\" title=\"2.3.3 P-盒替换\"></a>2.3.3 P-盒替换</h5><p>​        S-盒替换运算，每一盒得到4位，8盒共得到32位输出。这32位输出作为P盒置换的输入块。P盒置换将每一位输入位映射到输出位。任何一位都不能被映射两次，也不能被略去。</p>\n<p>​        经过P-盒置换的结果与最初64位分组的左半部分异或，然后左右两部分交换，开始下一轮迭代。P-盒置换表(表示数据的位置)共32位。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> P_Table[<span class=\"number\">32</span>] = &#123;</span><br><span class=\"line\">\t<span class=\"number\">16</span>,  <span class=\"number\">7</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">29</span>, <span class=\"number\">12</span>, <span class=\"number\">28</span>, <span class=\"number\">17</span>,  <span class=\"number\">1</span>, <span class=\"number\">15</span>, <span class=\"number\">23</span>, <span class=\"number\">26</span>,  <span class=\"number\">5</span>, <span class=\"number\">18</span>, <span class=\"number\">31</span>, <span class=\"number\">10</span>, </span><br><span class=\"line\">\t<span class=\"number\">2</span>,  <span class=\"number\">8</span>, <span class=\"number\">24</span>, <span class=\"number\">14</span>, <span class=\"number\">32</span>, <span class=\"number\">27</span>,  <span class=\"number\">3</span>,  <span class=\"number\">9</span>, <span class=\"number\">19</span>, <span class=\"number\">13</span>, <span class=\"number\">30</span>,  <span class=\"number\">6</span>, <span class=\"number\">22</span>, <span class=\"number\">11</span>,  <span class=\"number\">4</span>, <span class=\"number\">25</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-逆置换\"><a href=\"#2-4-逆置换\" class=\"headerlink\" title=\"2.4 逆置换\"></a>2.4 逆置换</h4><p>​        将初始置换进行16次的迭代，即进行16层的加密变换，这个运算过程我们暂时称为函数f。得到 <strong>L16</strong> 和 <strong>R16</strong> ，将此作为输入块，进行逆置换得到最终的密文输出块。逆置换是初始置换的逆运算，逆置换规则如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> IPR_Table[<span class=\"number\">64</span>] = &#123;              </span><br><span class=\"line\">\t<span class=\"number\">40</span>,  <span class=\"number\">8</span>, <span class=\"number\">48</span>, <span class=\"number\">16</span>, <span class=\"number\">56</span>, <span class=\"number\">24</span>, <span class=\"number\">64</span>, <span class=\"number\">32</span>, <span class=\"number\">39</span>,  <span class=\"number\">7</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">55</span>, <span class=\"number\">23</span>, <span class=\"number\">63</span>, <span class=\"number\">31</span>, </span><br><span class=\"line\">\t<span class=\"number\">38</span>,  <span class=\"number\">6</span>, <span class=\"number\">46</span>, <span class=\"number\">14</span>, <span class=\"number\">54</span>, <span class=\"number\">22</span>, <span class=\"number\">62</span>, <span class=\"number\">30</span>, <span class=\"number\">37</span>,  <span class=\"number\">5</span>, <span class=\"number\">45</span>, <span class=\"number\">13</span>, <span class=\"number\">53</span>, <span class=\"number\">21</span>, <span class=\"number\">61</span>, <span class=\"number\">29</span>, </span><br><span class=\"line\">\t<span class=\"number\">36</span>,  <span class=\"number\">4</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">52</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">28</span>, <span class=\"number\">35</span>,  <span class=\"number\">3</span>, <span class=\"number\">43</span>, <span class=\"number\">11</span>, <span class=\"number\">51</span>, <span class=\"number\">19</span>, <span class=\"number\">59</span>, <span class=\"number\">27</span>, </span><br><span class=\"line\">\t<span class=\"number\">34</span>,  <span class=\"number\">2</span>, <span class=\"number\">42</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">18</span>, <span class=\"number\">58</span>, <span class=\"number\">26</span>, <span class=\"number\">33</span>,  <span class=\"number\">1</span>, <span class=\"number\">41</span>,  <span class=\"number\">9</span>, <span class=\"number\">49</span>, <span class=\"number\">17</span>, <span class=\"number\">57</span>, <span class=\"number\">25</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-流程图\"><a href=\"#3-流程图\" class=\"headerlink\" title=\"3 流程图\"></a>3 流程图</h3><img src=\"https://s2.loli.net/2021/12/11/OATNKltjbcJaqMn.png\" style=\"zoom: 67%;\" />\n\n\n\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>自实现 <strong>DES</strong> 包括三个文件：<strong>function.h</strong>、<strong>function.c</strong> 以及 <strong>main.c</strong>.</p>\n<p><strong>function.h</strong>: 存放全局变量定义以及各实现函数声明。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************************************** 全局变量 **************************************************/</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************************************** 自定义函数 ************************************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetKey</span><span class=\"params\">(<span class=\"keyword\">char</span> Enc_Key[<span class=\"number\">8</span>])</span></span>;                                                       <span class=\"comment\">// 生成16轮的子密钥；</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">bool</span> * Data_out, <span class=\"keyword\">char</span> * Data_in, <span class=\"keyword\">int</span> number)</span></span>;                             <span class=\"comment\">// 字节转换成位；</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TableReplace</span><span class=\"params\">(<span class=\"keyword\">bool</span> *Data_out, <span class=\"keyword\">bool</span> *Data_in, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *Table, <span class=\"keyword\">int</span> number)</span></span>;    <span class=\"comment\">// 各种表的置换算法；</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Bitcopy</span><span class=\"params\">(<span class=\"keyword\">bool</span> * Data_out, <span class=\"keyword\">bool</span> * Data_in, <span class=\"keyword\">int</span> number)</span></span>;                          <span class=\"comment\">// 二进制数组的拷贝</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Loop_bit</span><span class=\"params\">(<span class=\"keyword\">bool</span> * Data_out, <span class=\"keyword\">int</span> movstep, <span class=\"keyword\">int</span> len)</span></span>;                               <span class=\"comment\">// 左移位；</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Run_DES</span><span class=\"params\">(<span class=\"keyword\">char</span> message[<span class=\"number\">8</span>], <span class=\"keyword\">char</span> HexMssage[<span class=\"number\">16</span>], <span class=\"keyword\">int</span> flag)</span></span>;                        <span class=\"comment\">// DES的轮加密算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Xor</span><span class=\"params\">(<span class=\"keyword\">bool</span> * Message_out,  <span class=\"keyword\">bool</span> * Message_in, <span class=\"keyword\">int</span> number)</span></span>;                       <span class=\"comment\">// 执行异或</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">S_change</span><span class=\"params\">(<span class=\"keyword\">bool</span> * Data_out,  <span class=\"keyword\">bool</span> * Data_in)</span></span>;                                    <span class=\"comment\">// S盒变换；</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HexToBit</span><span class=\"params\">(<span class=\"keyword\">bool</span> * Data_out, <span class=\"keyword\">char</span> * Data_in, <span class=\"keyword\">int</span> number)</span></span>;                         <span class=\"comment\">// 十六进制转二进制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BitToHex</span><span class=\"params\">(<span class=\"keyword\">char</span> * Data_out, <span class=\"keyword\">bool</span> * Data_in, <span class=\"keyword\">int</span> number)</span></span>;                         <span class=\"comment\">// 二进制转换成十六进制；</span></span><br></pre></td></tr></table></figure>\n\n<p>function.c: 存放各函数的具体实现内容。</p>\n<p>main.c: 主函数运行程序并测速，将1000000次的密文变化数写入result.txt中。</p>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p>​        以下为一次运行时的截图，经统计DES加密1000000次的时间约11400ms，解密时间类似。</p>\n<p><img data-fancybox=\"gallery\" data-sizes=\"auto\" data-src=\"https://s2.loli.net/2021/12/12/kzpP2KX8yBfujlb.png\" alt=\"结果一\" class=\"lazyload\"></p>\n<p>​        同时，明文每变化1bit，密文的变化情况如图所示(基本符合32的正态分布)：</p>\n<p><img src=\"https://s2.loli.net/2021/12/12/5JLhBqwcaskubZg.png\"></p>\n<p>​        0bit的出现的可能原因在于，当变化的1bit位和前一个变化的bit相同时(采用和前一次密文的结果比较的方式查看密文变化的位数)，二者的变化比特数可能相同，故会出现0的情况，属于本实验方法的原因，DES的原理还是符合0-64的正态分布的。</p>\n<p>代码实现在博主的个人GitHub上：<a href=\"https://github.com/hurry-hub/cryptography_work/tree/main/DES\">https://github.com/hurry-hub/cryptography_work/tree/main/DES</a></p>\n","comments":true,"link":"","categories":[{"name":"cryptography","slug":"cryptography","permalink":"https://hurry-hub.github.io/categories/cryptography/"}],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://hurry-hub.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"}]},{"title":"64位RSA算法","date":"2021-12-12T09:14:01.000Z","path":"2021/12/12/RSA/","text":"此为博主在学习密码学时完成的课堂任务，有关于64位的RSA密码算法。 64位的RSA算法基本原理RSA公开密钥密码体制的原理是：根据数论，寻求两个大素数比较简单，而将它们的乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。 基本流程（1）任意选取两个不同的大素数 p 和 q 计算乘积 n = pq, F_n = (p - 1) (q - 1); （2）任意选取一个大整数 e，满足 gcd(e, F_n) = 1，整数 e 用做加密钥（注意: e 的选取是很容易的，例如，所有大于p和q的素数可用） （3）确定的解密密钥 d，满足 (ed) mod F_n = 1，即 ed = k F_n + 1, k ≥ 1是一个任意的整数；所以若知道 e 和 F_n，则很容易计算出 d ； （4）公开整数 n 和 e ，秘密保存 d ； （5）将明文m（m &lt; n 是一个整数）加密成密文c，加密算法为 ​ c = E(m) = m ^ e mod n （6）将密文 c 解密为明文 m ，解密算法为 ​ m = D(c) = c ^ d mod n 然而只根据 n 和 e（注意：不是 p 和 q ）要计算出 d 是不可能的。因此，任何人都可对明文进行加密，但只有授权用户（知道 d）才可对密文解密。 具体实现由于实现的是64位的RSA算法，则在模时难免会超出unsigned long的最大取值，故需要自行编写大数运算算法进行实现。 1. 大数运算部分此处定义结构体NUM用以存放将要使用的大整数 12345typedef struct number&#123; int len; char symbol; int number[LEN];&#125;NUM, *pNUM; 再编写相应的运算函数，具体如下： 12345678910111213141516171819202122232425262728void reverse(int original[], int len); // 数组翻转void print(NUM original); // 打印大数void number_trim(pNUM original); // 数组翻转void zero(pNUM original); // 数组清零int compare_abs(NUM left, NUM right); // 绝对值比较NUM number(char str[]); // 字符串转大数NUM anti_add(NUM left, NUM right); // 元加法NUM anti_add(NUM left, NUM right); // 元减法NUM add(NUM left, NUM right); // 加法NUM sub(NUM left, NUM right); // 减法NUM mul(NUM left, NUM right); // 乘法void div_with_mod(NUM left, NUM right, pNUM result, pNUM residue); // 带余数除法NUM Div(NUM left, NUM right); // 除法NUM mod(NUM left, NUM right); // 模 2. 素数生成部分由于RSA算法需要先生成素数 p 和 q 以及 e ，故需要编写素数生成部分，具体如下： 12345678910111213ll gen_rand_num(int len); // 生成大随机数ll fast_mod(ll a, ll b, ll mod); // 计算２的幂ll fast_pow_mod(ll a, ll b, ll mod); // 快速幂ll mod_mul(ll a, ll b, ll mod); // 模乘ll mod_pow(ll a, ll n, ll mod); // 模幂bool Miller_Rabin(ll n); // Miller-Rabin测试ll prime(int len); // 生成大素数 3. RSA算法主体根据之前部分的内容，在已经生成 p 和 q 的基础上计算得出 n = p * q ，然后再根据 ed mod F_n = 1 计算得出 d ，最后再按照加密步骤和解密步骤进行加密、解密，具体如下： 12345NUM extend(NUM e, NUM F_n, const NUM one); // 扩展欧几里得求逆，获得解密密钥dNUM encrypt(NUM e, NUM n, NUM one); // RSA加密void decrypt(NUM d, NUM n, NUM cipher, NUM one); // RSA解密 运行截图该程序用以加密64位以内的十进制整数，可自定义选择 p 、q 以及 e 的长度，并根据对应长度输入明文进行加密，密文为明文加密后对应的十进制数。 从以上结果可以看出，当计算19位的 p 和13位的 q 以及11位的 e 时，计算解密密钥共花费时间3747s，约62min。 由于加密和解密时采用了二进制快速幂的方法，故耗时极短。 经过改进后，求逆部分使用了扩展欧几里得算法，极大的加快了运算速度，同时又用限制条件避免了d为负数的出现。 具体代码放在博主的个人GitHub：https://github.com/hurry-hub/cryptography_work/tree/main/RSA","content":"<hr>\n<p>此为博主在学习密码学时完成的课堂任务，有关于64位的RSA密码算法。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"64位的RSA算法\"><a href=\"#64位的RSA算法\" class=\"headerlink\" title=\"64位的RSA算法\"></a>64位的RSA算法</h1><h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><p>RSA公开密钥密码体制的原理是：根据数论，寻求两个大素数比较简单，而将它们的乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。</p>\n<h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>（1）任意选取两个不同的大素数 <strong>p</strong> 和 <strong>q</strong> 计算乘积 <strong>n = pq, F_n = (p - 1) (q - 1)</strong>;</p>\n<p>（2）任意选取一个大整数 <strong>e</strong>，满足 <strong>gcd(e, F_n) = 1</strong>，整数 <strong>e</strong> 用做加密钥（注意: <strong>e</strong> 的选取是很容易的，例如，所有大于p和q的素数可用） </p>\n<p>（3）确定的解密密钥 <strong>d</strong>，满足 <strong>(ed) mod F_n = 1</strong>，即 <strong>ed = k F_n + 1, k ≥ 1</strong>是一个任意的整数；所以若知道 <strong>e</strong> 和 <strong>F_n</strong>，则很容易计算出 <strong>d</strong> ；</p>\n<p>（4）公开整数 <strong>n</strong> 和 <strong>e</strong> ，秘密保存 <strong>d</strong> ；</p>\n<p>（5）将明文<strong>m</strong>（<strong>m</strong> &lt; <strong>n</strong> 是一个整数）加密成密文c，加密算法为 </p>\n<p>​                                        <strong>c = E(m) = m ^ e mod n</strong> </p>\n<p>（6）将密文 <strong>c</strong> 解密为明文 <strong>m</strong> ，解密算法为 </p>\n<p>​                                         <strong>m = D(c) = c ^ d mod n</strong></p>\n<p>然而只根据 <strong>n</strong> 和 <strong>e</strong>（注意：不是 <strong>p</strong> 和 <strong>q</strong> ）要计算出 <strong>d</strong> 是不可能的。因此，任何人都可对明文进行加密，但只有授权用户（知道 <strong>d</strong>）才可对密文解密。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>由于实现的是64位的RSA算法，则在模时难免会超出unsigned long的最大取值，故需要自行编写大数运算算法进行实现。</p>\n<h3 id=\"1-大数运算部分\"><a href=\"#1-大数运算部分\" class=\"headerlink\" title=\"1. 大数运算部分\"></a>1. 大数运算部分</h3><p>此处定义结构体NUM用以存放将要使用的大整数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">number</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> symbol;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number[LEN];</span><br><span class=\"line\">&#125;NUM, *pNUM;</span><br></pre></td></tr></table></figure>\n\n<p>再编写相应的运算函数，具体如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> original[], <span class=\"keyword\">int</span> len)</span></span>;                                <span class=\"comment\">// 数组翻转</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(NUM original)</span></span>;                                             <span class=\"comment\">// 打印大数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">number_trim</span><span class=\"params\">(pNUM original)</span></span>;                                      <span class=\"comment\">// 数组翻转</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">zero</span><span class=\"params\">(pNUM original)</span></span>;                                             <span class=\"comment\">// 数组清零</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare_abs</span><span class=\"params\">(NUM left, NUM right)</span></span>;                                 <span class=\"comment\">// 绝对值比较</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">number</span><span class=\"params\">(<span class=\"keyword\">char</span> str[])</span></span>;                                               <span class=\"comment\">// 字符串转大数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">anti_add</span><span class=\"params\">(NUM left, NUM right)</span></span>;                                    <span class=\"comment\">// 元加法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">anti_add</span><span class=\"params\">(NUM left, NUM right)</span></span>;                                    <span class=\"comment\">// 元减法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">add</span><span class=\"params\">(NUM left, NUM right)</span></span>;                                         <span class=\"comment\">// 加法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">sub</span><span class=\"params\">(NUM left, NUM right)</span></span>;                                         <span class=\"comment\">// 减法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">mul</span><span class=\"params\">(NUM left, NUM right)</span></span>;                                         <span class=\"comment\">// 乘法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">div_with_mod</span><span class=\"params\">(NUM left, NUM right, pNUM result, pNUM residue)</span></span>;    <span class=\"comment\">// 带余数除法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">Div</span><span class=\"params\">(NUM left, NUM right)</span></span>;                                         <span class=\"comment\">// 除法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">mod</span><span class=\"params\">(NUM left, NUM right)</span></span>;                                         <span class=\"comment\">// 模</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-素数生成部分\"><a href=\"#2-素数生成部分\" class=\"headerlink\" title=\"2. 素数生成部分\"></a>2. 素数生成部分</h3><p>由于RSA算法需要先生成素数 <strong>p</strong> 和 <strong>q</strong> 以及 <strong>e</strong> ，故需要编写素数生成部分，具体如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gen_rand_num</span><span class=\"params\">(<span class=\"keyword\">int</span> len)</span></span>;                                   <span class=\"comment\">// 生成大随机数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">fast_mod</span><span class=\"params\">(ll a, ll b, ll mod)</span></span>;                            <span class=\"comment\">// 计算２的幂</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">fast_pow_mod</span><span class=\"params\">(ll a, ll b, ll mod)</span></span>;                        <span class=\"comment\">// 快速幂</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mod_mul</span><span class=\"params\">(ll a, ll b, ll mod)</span></span>;                             <span class=\"comment\">// 模乘</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mod_pow</span><span class=\"params\">(ll a, ll n, ll mod)</span></span>;                             <span class=\"comment\">// 模幂</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Miller_Rabin</span><span class=\"params\">(ll n)</span></span>;                                    <span class=\"comment\">// Miller-Rabin测试</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">prime</span><span class=\"params\">(<span class=\"keyword\">int</span> len)</span></span>;                                          <span class=\"comment\">// 生成大素数</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-RSA算法主体\"><a href=\"#3-RSA算法主体\" class=\"headerlink\" title=\"3. RSA算法主体\"></a>3. RSA算法主体</h3><p>根据之前部分的内容，在已经生成 <strong>p</strong> 和 <strong>q</strong> 的基础上计算得出 <strong>n = p * q</strong> ，然后再根据 <strong>ed mod F_n = 1</strong> 计算得出 <strong>d</strong> ，最后再按照加密步骤和解密步骤进行加密、解密，具体如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">extend</span><span class=\"params\">(NUM e, NUM F_n, <span class=\"keyword\">const</span> NUM one)</span></span>;                <span class=\"comment\">// 扩展欧几里得求逆，获得解密密钥d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NUM <span class=\"title\">encrypt</span><span class=\"params\">(NUM e, NUM n, NUM one)</span></span>;                       <span class=\"comment\">// RSA加密</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrypt</span><span class=\"params\">(NUM d, NUM n, NUM cipher, NUM one)</span></span>;          <span class=\"comment\">// RSA解密</span></span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"运行截图\"><a href=\"#运行截图\" class=\"headerlink\" title=\"运行截图\"></a>运行截图</h2><p>该程序用以加密64位以内的十进制整数，可自定义选择 <strong>p</strong> 、<strong>q</strong> 以及 <strong>e</strong> 的长度，并根据对应长度输入明文进行加密，密文为明文加密后对应的十进制数。</p>\n<p><img data-fancybox=\"gallery\" data-sizes=\"auto\" data-src=\"https://s2.loli.net/2021/12/06/9JRb4YtPEcNpiuj.png\" alt=\"结果1\" class=\"lazyload\"></p>\n<p>从以上结果可以看出，当计算19位的 <strong>p</strong> 和13位的 <strong>q</strong> 以及11位的 <strong>e</strong> 时，计算解密密钥共花费时间3747s，约62min。</p>\n<p>由于加密和解密时采用了二进制快速幂的方法，故耗时极短。</p>\n<p>经过改进后，求逆部分使用了扩展欧几里得算法，极大的加快了运算速度，同时又用限制条件避免了d为负数的出现。</p>\n<p><img data-fancybox=\"gallery\" data-sizes=\"auto\" data-src=\"https://s2.loli.net/2021/12/07/1naOUeYotdLiVRw.png\" alt=\"结果2\" class=\"lazyload\"></p>\n<p>具体代码放在博主的个人GitHub：<a href=\"https://github.com/hurry-hub/cryptography_work/tree/main/RSA\">https://github.com/hurry-hub/cryptography_work/tree/main/RSA</a></p>\n","comments":true,"link":"","categories":[{"name":"cryptography","slug":"cryptography","permalink":"https://hurry-hub.github.io/categories/cryptography/"}],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://hurry-hub.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"}]},{"title":"信号量相关问题典型案例","date":"2021-06-19T12:12:31.000Z","path":"2021/06/19/PV/","text":"此为博主从个人csdn博客搬运来的第三篇，内容关于操作系统中信号量的经典题目。 题干类读者写者问题 有P1、P2、P3三类进程共享同一表格F，其中P1对F只读不写，P2对F只写不读，P3对F先读后写。不同进程可同时读F，但如果有进程写时，其余进程不能读或写。请用信号量以及P、V操作给出解决方案，并做一定分析。 理发师问题 理发店中有一位理发师，一把理发椅，N个候坐用的凳子。若无顾客，则理发师睡觉，且第一个顾客到来时叫醒理发师；若理发师正理发时有顾客到店，有空凳子就坐下，没有就离开。请用信号量以及P、V操作给出解决方案。 解法类读者写者问题简要分析：这是典型的读者写者问题，P1相当于读者，P2为写者，P3则是先读者后写者的角色。(本解答只是其中两种较简单的解法) 作答： 解法一12345678910111213141516171819202122232425262728293031323334353637383940414243// 设置信号量以及相关参数semaphore w = 1; //用以保持读者写者、写者写者互斥semaphore mutex = 1; //用以互斥访问countint count = 0; //用以记录当前读者数P1()&#123; while(1) &#123; P(mutex); if (count == 0) P(w); count++; V(mutex); reading... P(mutex); count--; if (count == 0) V(w); V(mutex); &#125;&#125;P2()&#123; while(1) &#123; P(w); writing... V(w); &#125;&#125;P3()&#123; while(1) &#123; P(mutex); if (count == 0) P(w); count++; V(mutex); reading... P(mutex); count--; if (count == 0) V(w); V(mutex); P(w); writing... V(w); &#125;&#125; 简要分析：此解法满足读者优先的策略，因为一旦有读者进程进入便可抢占插入到写者进程之前。 解法二1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// 设置信号量以及相关参数semaphore rw = 1; //用以保持读者写者、写者写者互斥semaphore w = 1; //用以实现读写公平semaphore mutex = 1; //用以互斥访问countint count = 0; //用以记录当前读者数P1()&#123; while(1) &#123; P(w); P(mutex); if (count == 0) P(rw); count++; V(mutex); V(w); reading... P(mutex); count--; if (count == 0) V(rw); V(mutex); &#125;&#125;P2()&#123; while(1) &#123; P(w); P(rw); writing... V(rw); V(w); &#125;&#125;P3()&#123; while(1) &#123; P(mutex); if (count == 0) P(w); count++; V(mutex); reading... P(mutex); if (count == 0) V(w); count--; V(mutex); P(w); P(rw); writing... V(rw); V(w); &#125;&#125; 简要分析：此解法可实现较为公平的读写，因为此解法遵循先来先服务的原则。 理发师问题对于理发师问题，可设置三个信号量加以解决 12345678910111213141516171819202122232425262728semaphore mutex = 1; //用于互斥访问countsemaphore barber = 0; //可理解为可用的理发师资源(清醒时)semaphore customer = 0; //可理解为等待理发的顾客int count = 0; //相当于customer的计数Barber()&#123; while(1) &#123; P(customer); //等候顾客，即睡觉 P(mutex); //有顾客，进入临界区 count--; V(barber); //可理解为释放一个理发师资源 V(mutex); //退出临界区 理发…… &#125;&#125;Customer()&#123; P(mutex); //有顾客来，进入临界区 if (count &lt; N) &#123; //若有空位置则坐下 count++; //等待顾客数加一 V(customer); //唤醒理发师 V(mutex); //退出临界区 P(barber); //可理解为申请一个理发师资源 理发…… &#125; else &#123; //没位置顾客离开理发店，退出临界区 V(mutex); &#125;&#125;","content":"<hr>\n<p>此为博主从个人csdn博客搬运来的第三篇，内容关于操作系统中信号量的经典题目。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"题干\"><a href=\"#题干\" class=\"headerlink\" title=\"题干\"></a>题干</h1><h2 id=\"类读者写者问题\"><a href=\"#类读者写者问题\" class=\"headerlink\" title=\"类读者写者问题\"></a>类读者写者问题</h2><p> 有P1、P2、P3三类进程共享同一表格F，其中P1对F只读不写，P2对F只写不读，P3对F先读后写。不同进程可同时读F，但如果有进程写时，其余进程不能读或写。请用信号量以及P、V操作给出解决方案，并做一定分析。</p>\n<h2 id=\"理发师问题\"><a href=\"#理发师问题\" class=\"headerlink\" title=\"理发师问题\"></a>理发师问题</h2><p> 理发店中有一位理发师，一把理发椅，N个候坐用的凳子。若无顾客，则理发师睡觉，且第一个顾客到来时叫醒理发师；若理发师正理发时有顾客到店，有空凳子就坐下，没有就离开。请用信号量以及P、V操作给出解决方案。</p>\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><h2 id=\"类读者写者问题-1\"><a href=\"#类读者写者问题-1\" class=\"headerlink\" title=\"类读者写者问题\"></a>类读者写者问题</h2><p>简要分析：这是典型的读者写者问题，P1相当于读者，P2为写者，P3则是先读者后写者的角色。(本解答只是其中两种较简单的解法)</p>\n<p>作答：</p>\n<h3 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置信号量以及相关参数</span></span><br><span class=\"line\">semaphore w = <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//用以保持读者写者、写者写者互斥</span></span><br><span class=\"line\">semaphore mutex = <span class=\"number\">1</span>;\t\t<span class=\"comment\">//用以互斥访问count</span></span><br><span class=\"line\">int count = <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">//用以记录当前读者数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">P1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tP(mutex);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) P(w);</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tV(mutex);</span><br><span class=\"line\">\t\treading...</span><br><span class=\"line\">\t\tP(mutex);</span><br><span class=\"line\">\t\tcount--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) V(w);</span><br><span class=\"line\">\t\tV(mutex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">P2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tP(w);</span><br><span class=\"line\">\t\twriting...</span><br><span class=\"line\">\t\tV(w);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">P3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tP(mutex);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) P(w);</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tV(mutex);</span><br><span class=\"line\">\t\treading...</span><br><span class=\"line\">\t\tP(mutex);</span><br><span class=\"line\">\t\tcount--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) V(w);</span><br><span class=\"line\">\t\tV(mutex);</span><br><span class=\"line\">\t\tP(w);</span><br><span class=\"line\">\t\twriting...</span><br><span class=\"line\">\t\tV(w);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要分析：此解法满足读者优先的策略，因为一旦有读者进程进入便可抢占插入到写者进程之前。</p>\n<h3 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置信号量以及相关参数</span></span><br><span class=\"line\">semaphore rw = <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//用以保持读者写者、写者写者互斥</span></span><br><span class=\"line\">semaphore w = <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//用以实现读写公平</span></span><br><span class=\"line\">semaphore mutex = <span class=\"number\">1</span>;\t\t<span class=\"comment\">//用以互斥访问count</span></span><br><span class=\"line\">int count = <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">//用以记录当前读者数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">P1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tP(w);</span><br><span class=\"line\">\t\tP(mutex);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) P(rw);</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tV(mutex);</span><br><span class=\"line\">\t\tV(w);</span><br><span class=\"line\">\t\treading...</span><br><span class=\"line\">\t\tP(mutex);</span><br><span class=\"line\">\t\tcount--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) V(rw);</span><br><span class=\"line\">\t\tV(mutex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">P2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tP(w);</span><br><span class=\"line\">\t\tP(rw);</span><br><span class=\"line\">\t\twriting...</span><br><span class=\"line\">\t\tV(rw);</span><br><span class=\"line\">\t\tV(w);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">P3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tP(mutex);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) P(w);</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tV(mutex);</span><br><span class=\"line\">\t\treading...</span><br><span class=\"line\">\t\tP(mutex);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) V(w);</span><br><span class=\"line\">\t\tcount--;</span><br><span class=\"line\">\t\tV(mutex);</span><br><span class=\"line\">\t\tP(w);</span><br><span class=\"line\">\t\tP(rw);</span><br><span class=\"line\">\t\twriting...</span><br><span class=\"line\">\t\tV(rw);</span><br><span class=\"line\">\t\tV(w);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简要分析：此解法可实现较为公平的读写，因为此解法遵循先来先服务的原则。</p>\n<h2 id=\"理发师问题-1\"><a href=\"#理发师问题-1\" class=\"headerlink\" title=\"理发师问题\"></a>理发师问题</h2><p>对于理发师问题，可设置三个信号量加以解决</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semaphore mutex = <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//用于互斥访问count</span></span><br><span class=\"line\">semaphore barber = <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">//可理解为可用的理发师资源(清醒时)</span></span><br><span class=\"line\">semaphore customer = <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">//可理解为等待理发的顾客</span></span><br><span class=\"line\">int count = <span class=\"number\">0</span>;\t\t\t\t\t<span class=\"comment\">//相当于customer的计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Barber</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tP(customer);\t\t<span class=\"comment\">//等候顾客，即睡觉</span></span><br><span class=\"line\">\t\tP(mutex);\t\t\t<span class=\"comment\">//有顾客，进入临界区</span></span><br><span class=\"line\">\t\tcount--;</span><br><span class=\"line\">\t\tV(barber);\t\t\t<span class=\"comment\">//可理解为释放一个理发师资源</span></span><br><span class=\"line\">\t\tV(mutex);\t\t\t<span class=\"comment\">//退出临界区</span></span><br><span class=\"line\">\t\t理发……</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Customer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tP(mutex);\t\t\t\t<span class=\"comment\">//有顾客来，进入临界区</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &lt; N) &#123;\t\t<span class=\"comment\">//若有空位置则坐下</span></span><br><span class=\"line\">\t\tcount++;\t\t\t<span class=\"comment\">//等待顾客数加一</span></span><br><span class=\"line\">\t\tV(customer);\t\t<span class=\"comment\">//唤醒理发师</span></span><br><span class=\"line\">\t\tV(mutex);\t\t\t<span class=\"comment\">//退出临界区</span></span><br><span class=\"line\">\t\tP(barber);\t\t\t<span class=\"comment\">//可理解为申请一个理发师资源</span></span><br><span class=\"line\">\t\t理发……</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;\t\t\t\t<span class=\"comment\">//没位置顾客离开理发店，退出临界区</span></span><br><span class=\"line\">\t\tV(mutex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","comments":true,"link":"","categories":[{"name":"os","slug":"os","permalink":"https://hurry-hub.github.io/categories/os/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://hurry-hub.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"最小函数依赖集Fm的定义，求法以及举例","date":"2021-06-06T07:27:21.000Z","path":"2021/06/06/Fm/","text":"此篇为博主从个人csdn搬运的第二篇博客，关于数据库的最小函数依赖集Fm的求解问题。 定义如果函数依赖集F满足以下三个条件，则称F为最小函数依赖集，记作Fm。 ①F中每个函数依赖的右部都是单属性，即右部最简化。 ②对于F中任一函数依赖X -&gt; A 和X的真子集X&#39;,(F - (X - A)) ∪ (X&#39; -&gt; A) 与F都不等价，即左部无多余属性。 ③对于F中任一函数依赖X -&gt; A,F - &#123;X -&gt; A&#125;与F都不等价,即无多余函数依赖。 求法输入：一个函数依赖集F。输出：F的一个等价的最小函数依赖集Fm。步骤：(1)用分解规则，使F中的每个函数依赖的右部仅含单属性。此步为等价分解。(2)去掉各依赖左部多余的属性。一个一个地检查左部非单个属性地函数依赖。即XY -&gt; A ,判断Y是否多余，则在分解后地F求X的**属性闭包X+**，若A包含于X+ ，则Y是多余的。此步为等价消属性。(3)去掉多余的函数依赖。逐一检查上步结果F的各函数依赖X -&gt; A,并将X -&gt; A从F中去掉，然后在剩下的F中去求X+，若A包含于X+，则X -&gt; A多余。依次做下去，直到找不到冗余的函数依赖。此步为等价消依赖。 举例设有函数依赖集 F = {AB -&gt; CE, A -&gt; C, GP -&gt; B, EP -&gt; A, CDE -&gt; P, HB -&gt; P, D -&gt; HG, ABC -&gt; PG}， 求与 F 等价的最小函数依赖集。 解：①分解D-&gt;HG为D-&gt;H、D-&gt;G，分解AB-&gt;CE为AB-&gt;C、AB-&gt;E，分解ABC-&gt;PG为ABC-&gt;P、ABC-&gt;G，得到F={AB-&gt;C, AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} ②判断AB -&gt; C中B是否冗余：由于存在A -&gt; C，故B冗余，F={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} 经判断其余左部均无多余属性，进行到下一步。 ③判断AB-&gt;E是否冗余, F’ ={A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}AB+ = ABCPG, AB-&gt;E不冗余, F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} 判断A-&gt;C是否冗余, F’ ={AB-&gt;E, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}A+ = A，A-&gt;C不冗余, F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} 判断GP-&gt;B是否冗余, F’ ={AB-&gt;E, A-&gt;C, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}GP+ = GP, GP-&gt;B不冗余, **F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} ** 判断EP-&gt;A是否冗余, F’ = {AB-&gt;E, A-&gt;C, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}EP+ = EP , EP-&gt;A不冗余, **F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} ** 判断CDE-&gt;P是否冗余, F’ = {AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}CDE+ = CDEHG, CDE-&gt;P不冗余, F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} 判断HB-&gt;P是否冗余, F’ ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}HB+ = HB, HB-&gt;P不冗余, F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} 判断D-&gt;H是否冗余, F’ ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;G, ABC-&gt;P, ABC-&gt;G}D+ = DG, D-&gt;H不冗余, F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} 判断D-&gt;G是否冗余, F’ ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, ABC-&gt;P, ABC-&gt;G}D+ = DH, D-&gt;G不冗余, F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} 判断ABC-&gt;G是否冗余, F’ ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P}ABC+ = ABCEP, ABC-&gt;G不冗余, F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} 故 Fm={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} 分解具有无损连接性和依赖保持性的3NF的方法和例子","content":"<hr>\n<p>此篇为博主从个人csdn搬运的第二篇博客，关于数据库的最小函数依赖集Fm的求解问题。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>如果函数依赖集F满足以下三个条件，则称F为最小函数依赖集，记作<strong>Fm</strong>。</p>\n<pre><code>①F中每个函数依赖的右部都是单属性，即右部最简化。\n②对于F中任一函数依赖X -&gt; A 和X的真子集X&#39;,(F - (X - A)) ∪ (X&#39; -&gt; A)\n与F都不等价，即左部无多余属性。\n③对于F中任一函数依赖X -&gt; A,F - &#123;X -&gt; A&#125;与F都不等价,即无多余函数依赖。\n</code></pre>\n<h1 id=\"求法\"><a href=\"#求法\" class=\"headerlink\" title=\"求法\"></a>求法</h1><p>输入：一个函数依赖集F。<br>输出：F的一个等价的<strong>最小函数依赖集Fm</strong>。<br>步骤：<br>(1)用<strong>分解</strong>规则，使F中的每个函数依赖的右部仅含单属性。此步为等价分解。<br>(2)<strong>去掉各依赖左部多余的属性</strong>。一个一个地检查左部非单个属性地函数依赖。即XY -&gt; A ,判断Y是否多余，则在分解后地F求X的**属性闭包X+**，若A包含于X+ ，则Y是多余的。此步为等价消属性。<br>(3)<strong>去掉多余的函数依赖</strong>。逐一检查上步结果F的各函数依赖X -&gt; A,并将X -&gt; A从F中去掉，然后在剩下的F中去求X+，若A包含于X+，则X -&gt; A多余。依次做下去，直到找不到冗余的函数依赖。此步为等价消依赖。</p>\n<h1 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h1><p>设有函数依赖集 F = {AB -&gt; CE, A -&gt; C, GP -&gt; B, EP -&gt; A, CDE -&gt; P, HB -&gt; P, D -&gt; HG, ABC -&gt; PG}， 求与 F 等价的最小函数依赖集。</p>\n<p>解：<br>①分解D-&gt;HG为D-&gt;H、D-&gt;G，分解AB-&gt;CE为AB-&gt;C、AB-&gt;E，分解ABC-&gt;PG为ABC-&gt;P、ABC-&gt;G，得到<strong>F={AB-&gt;C, AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong></p>\n<p>②判断AB -&gt; C中B是否冗余：由于存在A -&gt; C，故B冗余，<strong>F={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong></p>\n<p>经判断其余左部均无多余属性，进行到下一步。</p>\n<p>③判断AB-&gt;E是否冗余, F’ ={A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}<br><strong>AB+ = ABCPG</strong>, AB-&gt;E不冗余, <strong>F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong></p>\n<p>判断A-&gt;C是否冗余, F’ ={AB-&gt;E, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}<br><strong>A+ = A</strong>，A-&gt;C不冗余, <strong>F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong> </p>\n<p>判断GP-&gt;B是否冗余, F’ ={AB-&gt;E, A-&gt;C, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}<br><strong>GP+ = GP</strong>, GP-&gt;B不冗余, **F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} **</p>\n<p>判断EP-&gt;A是否冗余, F’ = {AB-&gt;E, A-&gt;C, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}<br><strong>EP+ = EP</strong> , EP-&gt;A不冗余, **F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G} **</p>\n<p>判断CDE-&gt;P是否冗余, F’ = {AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}<br><strong>CDE+ = CDEHG</strong>, CDE-&gt;P不冗余, <strong>F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong></p>\n<p>判断HB-&gt;P是否冗余, F’ ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}<br><strong>HB+ = HB</strong>, HB-&gt;P不冗余, <strong>F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong></p>\n<p>判断D-&gt;H是否冗余, F’ ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;G, ABC-&gt;P, ABC-&gt;G}<br><strong>D+ = DG</strong>, D-&gt;H不冗余, <strong>F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong></p>\n<p>判断D-&gt;G是否冗余, F’ ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, ABC-&gt;P, ABC-&gt;G}<br><strong>D+ = DH</strong>, D-&gt;G不冗余, <strong>F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong></p>\n<p>判断ABC-&gt;G是否冗余, F’ ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P}<br><strong>ABC+ = ABCEP</strong>, ABC-&gt;G不冗余, <strong>F ={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong></p>\n<p>故 <strong>Fm={AB-&gt;E, A-&gt;C, GP-&gt;B, EP-&gt;A, CDE-&gt;P, HB-&gt;P, D-&gt;H, D-&gt;G, ABC-&gt;P, ABC-&gt;G}</strong></p>\n<p><a href=\"https://hurry-hub.github.io/2021/06/06/3NF/\">分解具有无损连接性和依赖保持性的3NF的方法和例子</a></p>\n","comments":true,"link":"","categories":[{"name":"sql","slug":"sql","permalink":"https://hurry-hub.github.io/categories/sql/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://hurry-hub.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"分解为具有无损连接性和依赖保持性的3NF的方法以及例子","date":"2021-06-06T06:41:38.000Z","path":"2021/06/06/3NF/","text":"​ 此篇为本人个人博客的第一篇，从博主个人的csdn搬运而来，关于数据库的3NF 分解问题。 通用方法输入：关系模式R&lt;U, F&gt;输出：具有无损连接性和函数依赖保持性的3NF分解ρ = {R1, R2, …, Rk}. 方法：(1)__最小化__。求F的最小函数依赖集Fm。(2)__排除__。若Fm中存在X-&gt;A,使得XA = U，则R已是3NF，转(6)。(3)__独立__。若R中某些属性未出现在Fm中任一函数依赖的左部或右部，则将它们从R中分出去，单独构成一个关系子模式。(4)分组(相同左部原则)。对于Fm中的每一个X-&gt;A，都构成一个关系子模式XA(但若有X-&gt;A1, X-&gt;A2,…, X-&gt;An，可用合并规则便为X -&gt; A1A2…An作为ρ的一个子模式)。 经过以上几步，求出函数依赖保持性分解：ρ = {R1, R2, …, Rk}。(5)__添键__。若ρ中没有一个子模式含有R的候选键X，则令ρ = ρ ∪ {X}；若存在Ri包含于Rj(i ≠ j)，则删去Ri。(6)__停止分解__，输出ρ。此时ρ是既具有无损连接性又具有函数依赖保持性的3NF分解。 例子关系模式R(A, B, C, D, E, P, G, H, I, J)满足下列的函数依赖：{AB -&gt; E, ABE -&gt; GP, B -&gt; PI, C -&gt; J, CJ -&gt; I, G -&gt; H}。(1) 求出最小函数依赖集Fm = {AB -&gt; E, AB -&gt; G, B -&gt; P, B -&gt; I, C -&gt; J, C -&gt; I, G -&gt; H}，候选键为ABCD。 (2)不存在满足X-&gt;A,使得XA = U的依赖。 (3)D未存在在任意一函数依赖中，故独立出去，R = R - {D} ={A, B, C, E, P, G, H, I, J}。 (4)由于AB -&gt; E, AB -&gt; G有相同左部，故合并为AB -&gt; EG，同理有B -&gt; PI, C -&gt; JI。 (5)R中不含候选键ABCD，故添加ABCD进入。 (6)输出**ρ = {ABEG, BPI, CJI, GH, ABCD}**，即为具有无损连接性和依赖保持性的3NF。 最小函数依赖集Fm的定义，求法以及举例","content":"<hr>\n<p>​    此篇为本人个人博客的第一篇，从博主个人的csdn搬运而来，关于数据库的3NF 分解问题。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h1><p>输入：关系模式R&lt;U, F&gt;<br>输出：具有无损连接性和函数依赖保持性的3NF分解ρ = {R1, R2, …, Rk}.</p>\n<p>方法：<br>(1)__最小化__。求F的最小函数依赖集Fm。<br>(2)__排除__。若Fm中存在X-&gt;A,使得XA = U，则R已是3NF，转(6)。<br>(3)__独立__。若R中某些属性未出现在Fm中任一函数依赖的左部或右部，则将它们从R中分出去，单独构成一个关系子模式。<br>(4)<strong>分组</strong>(<strong>相同左部原则</strong>)。对于Fm中的每一个X-&gt;A，都构成一个关系子模式XA(但若有X-&gt;A1, X-&gt;A2,…, X-&gt;An，可用合并规则便为X -&gt; A1A2…An作为ρ的一个子模式)。<br>    经过以上几步，求出函数依赖保持性分解：ρ = {R1, R2, …, Rk}。<br>(5)__添键__。若ρ中没有一个子模式含有R的候选键X，则令ρ = ρ ∪ {X}；若存在Ri包含于Rj(i ≠ j)，则删去Ri。<br>(6)__停止分解__，输出ρ。<br>此时ρ是既具有无损连接性又具有函数依赖保持性的3NF分解。</p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>关系模式R(A, B, C, D, E, P, G, H, I, J)满足下列的函数依赖：{AB -&gt; E, ABE -&gt; GP, B -&gt; PI, C -&gt; J, CJ -&gt; I, G -&gt; H}。<br>(1)     求出最小函数依赖集Fm = {AB -&gt; E, AB -&gt; G, B -&gt; P, B -&gt; I, C -&gt; J, C -&gt; I, G -&gt; H}，候选键为ABCD。</p>\n<p>(2)不存在满足X-&gt;A,使得XA = U的依赖。</p>\n<p>(3)D未存在在任意一函数依赖中，故独立出去，R = R - {D} =<br>{A, B, C, E, P, G, H, I, J}。</p>\n<p>(4)由于AB -&gt; E, AB -&gt; G有相同左部，故合并为AB -&gt; EG，同理有B -&gt; PI, C -&gt; JI。</p>\n<p>(5)R中不含候选键ABCD，故添加ABCD进入。</p>\n<p>(6)输出**ρ = {ABEG, BPI, CJI, GH, ABCD}**，即为具有无损连接性和依赖保持性的3NF。</p>\n<p><a href=\"https://hurry-hub.github.io/2021/06/06/Fm/\">最小函数依赖集Fm的定义，求法以及举例</a></p>\n","comments":true,"link":"","categories":[{"name":"sql","slug":"sql","permalink":"https://hurry-hub.github.io/categories/sql/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://hurry-hub.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}],"categories":[{"name":"cryptography","slug":"cryptography","permalink":"https://hurry-hub.github.io/categories/cryptography/"},{"name":"os","slug":"os","permalink":"https://hurry-hub.github.io/categories/os/"},{"name":"sql","slug":"sql","permalink":"https://hurry-hub.github.io/categories/sql/"}],"tags":[{"name":"密码学","slug":"密码学","permalink":"https://hurry-hub.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hurry-hub.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"数据库","slug":"数据库","permalink":"https://hurry-hub.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}